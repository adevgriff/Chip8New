
---------------------------Memory----------------------------------
memory 4096 uint8_t array for ram
The whole memory space is considered writable
000-1FF first chip-8 interpreter COSMAC VIP computer expects a chip-8 program to be loaded into memory after it at 200
initial space can be left empty except for font


----------------------------Font-------------------------------------------------------
CHIP-8 emulator should have built-in font with sprite data representing hex numbers 0-F each character 4 pixels wide byy 5 pixels tall

to draw these characters the index register I is set to the memory location for the sprite the characters should be placed from 050-09F
0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
0x20, 0x60, 0x20, 0x20, 0x70, // 1
0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
0x90, 0x90, 0xF0, 0x10, 0x10, // 4
0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
0xF0, 0x10, 0x20, 0x40, 0x40, // 7
0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
0xF0, 0x90, 0xF0, 0x90, 0x90, // A
0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
0xF0, 0x80, 0x80, 0x80, 0xF0, // C
0xE0, 0x90, 0x90, 0x90, 0xE0, // D
0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
0xF0, 0x80, 0xF0, 0x80, 0x80  // F

---------------------------Display-----------------------------------
64 x 32 boolean for screen pixel on or off also possible 128 x 64 for super chip
has to update at 60 Hz or 60 FPS
good idea to only redraw screen when there has been a change
DXYN is used to draw a sprite consisting of 8-bit bytes where each bit is a horizontal pixel
sprites are between 1 and 15 bytes tall 1 bits flip pixels

pixels will blink because of how this is handeled pixels can fade out to fix this if desiered

----------------------------Registers--------------------------------------------------
uint16_t program counter only lower 12 bits used
uint16_t index register I used to point at locations in memory
uint16_t stack stack pointer used to call subroutines/functions and return from them
uint8_t delay timer decremented at a rate of 60 Hz 60 times per second until reaches 0
uint8_t sound timer which functions like delay timer but makes a sound when not zero
V0-VF uint8_t registers VF is flag register either one or zero based on some rule

--------------------------------Stack-----------------------------------------------
about 16 word entry max make a stack overflow

----------------------------------Timers---------------------------------------------
independent of the fetch/decode/execute loop

------------------------------------Keypad-------------------------------------------
1	2	3	C
4	5	6	D
7	8	9	E
A	0	B	F

needs to be implemented as the way to interact with the computer

----------------------------------Timing of processor-----------------------------------
some 1MHz others 4Mhz needs to be adjustable
700 instructions per scond is usually a good first


-------------------------------------Fetch------------------------------------------------
Read instuction pc is currently pointing at an instuction is two bytes so you will need to read two successive bytes from memory
PC immediatly incremented by 2

---------------------------------------Decode-----------------------------------------
instuctions are divided into broad categories by first nibble
X and Y are always used to look up the values in corresponding registers

---------------------------------------Execute----------------------------------------
start with these instructions and IBM logo program
00E0 (clear screen)
1NNN (jump)
6XNN (set register VX)
7XNN (add value to register VX)
ANNN (set index register I)
DXYN (display/draw)

the rest can be implemented and tested with 
The BonCoder/BestCoder test, BC_test (can be found online)
corax89â€™s chip8-test-rom
